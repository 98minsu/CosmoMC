#Params for "getdist" - for processing .txt chain information

#if you are not using .paramnames file, use these lines so parameters named by number
nparam=2

file_root = chains/test
out_root = 
out_dir = 
plot_data_dir = plot_data/

#If 0 assume 1 and no chain filename prefixes
chain_num = 
first_chain = 
exclude_chain = 

#For disgarding burn-in if using raw chains
#if < 1 interpreted as a fraction of the total number of rows (0.3 ignores first 30% of lines)
ignore_rows = 0.3

#If generated chain at higher temperature can cool for computing results
cool = 1

#default settings, can also override in this file if required
DEFAULT(python/getdist/analysis_defaults.ini)

no_tests = F
#samples_are_chains = F can be useful for other samples when first two columns not present
samples_are_chains = T

#Include these in 1D plots for comparison - must have same parameters
compare_num = 0
compare1 = basic6_cmb

#settings for output of plot files

no_plots = T

plot_meanlikes = T
shade_meanlikes = F

# if non-zero, output _thin file, thinned by thin_factor
thin_factor = 0
#Do probabilistic importance sampling to single samples
make_single_samples = F
single_thin = 4

#if we only want 2D plots agains a particular variable
plot_2D_param = 0

#if above zero, instead plot just these combinations:
#if both zero it will plot most correlated variables
plot_2D_num = 1
plot1 = param1 param2
plot2 =

#number of sample plots, colored by third parameter
#if last parameter is 0 or -1 colored by the parameter most correlated
#with one of the eigenvector directions (e.g. parallel or orthogonal to degeneracy)
num_3D_plots = 0
3D_plot1 = param1 param2 param3

#Output 2D plots for param combos with 1D marginalized plots along the diagonal
triangle_plot = T
triangle_params = 

#e.g. colormap('jet')
matlab_colscheme =

#Parameters to use. If not specified use all parameters which have lables.
#plot_params = param1 param2 param3

#marker[x] adds vertical line to MatLab 1D plot
#marker[myparam] = 0

#Need to give limits on derived parameters if prior cuts off distribution where not very small
#limits[myparam]= 0 N

#all_limits sets all limitsxx for all variables to the same; can be useful for bins
#though now set by default for MCMC parametrs from .bounds file
all_limits = 

#compute two-tail marginalized limits irrespective of limits settings above
#(otherwise limits are two-tail only for those parameters without limits)
force_twotail = F

#PCA - analysis output in file file_root.PCA
#number of parameter to do PCA for
PCA_num = 0
PCA_normparam = 1
#The parameters to use
PCA_params = 1 2 3
#L for log(x), M for log(-x), N for no log
PCA_func   = LLL

#if parameter_names empty set from file_root.paramnames if it exists
#otherwise set up labels manually in this file using lab1=... etc.
parameter_names = 
#params_generic.paramnames


