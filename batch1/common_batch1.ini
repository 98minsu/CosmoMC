##Sample file of common parameters for baseline Planck set of runs

batch_name = batch1

local_dir = %LOCALDIR%
#directory, e.g. window functions in directory windows under data_dir
data_dir = %LOCALDIR%data/


INCLUDE(likelihood_batch1.ini)

#Feedback level ( 2=lots,1=chatty,0=none)
feedback = 1

#Force computation of sigma_8 even if use_mpk = F
get_sigma8 = F

#If using tensors, enforce n_T = -A_T/(8A_s)
inflation_consistency = T

#Set Y_He from BBN constraint; if false set to fixed value of 0.24 by default.
bbn_consistency=T 

param[omegabh2] = 0.0222 0.005 0.1 0.0003 0.0002
param[omegach2] = 0.12 0.001 0.99 0.003 0.002
param[theta] = 1.0414 0.5 10 0.001 0.0004
param[tau] = 0.09 0.01 0.8 0.02 0.01

param[ns] = 0.96 0.9 1.1 0.005 0.004
#log[10^10 A_s]
param[logA] = 3.1096 2.7 4 0.001 0.001

#SZ amplitude, as in WMAP analysis
param[asz]= 0 0 0 0 0


#Temperature at which to Monte-Carlo
temperature = 1

#Maximum number of chain steps
samples = 1000000

#use fast-slow parameter distinctions to speed up 
#(note for basic models WMAP3 code is only ~3x as fast as CAMB)
use_fast_slow = F

#Scale of proposal relative to covariance; 2.4 is recommended by astro-ph/0405462 for Gaussians
#If propose_matrix is much broader than the new distribution, make proportionately smaller
#Generally make smaller if your acceptance rate is too low
propose_scale = 2.4

#Increase to oversample fast parameters more, e.g. if space is odd shape
oversample_fast = 1

#if non-zero number of steps between sample info dumped to file file_root.data
#WANT THIS ON so we can do importance sampling runs quickly later for likelihood updates
indep_sample = 10

#number of samples to disgard at start; usually set to zero and remove later
burn_in = 0

#If zero set automatically
num_threads = 0

#MPI mode multi-chain options (recommended)
#MPI_Converge_Stop is a (variance of chain means)/(mean of variances) parameter that can be used to stop the chains
#Set to a negative number not to use this feature. Does not guarantee good accuracy of confidence limits.
MPI_Converge_Stop = 0.03


#Do initial period of slice sampling; may be good idea if 
#cov matrix or widths are likely to be very poor estimates
MPI_StartSliceSampling  = F

#Can optionally also check for convergence of confidence limits (after MPI_Converge_Stop reached)
#Can be good idea as small value of MPI_Converge_Stop does not (necessarily) imply good exploration of tails
MPI_Check_Limit_Converge = T

#if MPI_Check_Limit_Converge = T, give tail fraction to check (checks both tails):
MPI_Limit_Converge = 0.025
#permitted quantile chain variance in units of the standard deviation (small values v slow):
MPI_Limit_Converge_Err = 0.2
#which parameters tails to check. If zero, check all parameters:
MPI_Limit_Param = 0

#if MPI_LearnPropose = T, the proposal density is continally updated from the covariance of samples so far (since burn in)
MPI_LearnPropose = T
#can set a value of converge at which to stop updating covariance (so that it becomes rigorously Markovian)
#e.g. MPI_R_StopProposeUpdate = 0.4 will stop updating when (variance of chain means)/(mean of variances) < 0.4
MPI_R_StopProposeUpdate = 0

#If have covmat, R to reach before updating proposal density (increase if covmat likely to be poor)
#Only used if not varying new parameters that are fixed in covmat
MPI_Max_R_ProposeUpdate = 3
#As above, but used if varying new parameters that were fixed in covmat
MPI_Max_R_ProposeUpdateNew = 50

#Initial power spectrum amplitude point (Mpc^{-1})
pivot_k = 0.05

#Whether the CMB should be lensed (slows a lot unless also computing matter power)
CMB_lensing = T
accuracy_level = 1

high_accuracy_default = T

#1: Simple Metropolis, 2: slice sampling, 3: slice sampling fast parameters, 4: directional gridding
sampling_method = 1


##Rest are fairly irrelevant


#if sampling_method =4, iterations per gridded direction
directional_grid_steps = 20

#action = 0:  MCMC, action=1: postprocess .data file, action=2: find best fit point only
action = 0

#If propose_matrix is blank (first run), can try to use numerical Hessian to 
#estimate a good propose matrix. As a byproduct you also get an approx best fit point
estimate_propose_matrix = F

#Tolerance on log likelihood to use when estimating best fit point
delta_loglike = 2

#if blank this is set from system clock
rand_seed = 

#If true, generate checkpoint files and terminated runs can be restarted using exactly the same command
#and chains continued from where they stopped
#With checkpoint=T note you must delete all chains/file_root.* files if you want new chains with an old file_root
checkpoint = F

#whether to stop on CAMB error, or continue ignoring point
stop_on_error=  T

#If action = 1
redo_likelihoods = T
redo_theory = F
redo_cls = F
redo_pk = F
redo_skip = 0
redo_outroot = 
redo_thin = 1
redo_add = F
redo_from_text = F
#If large difference in log likelihoods may need to offset to give sensible weights
#for exp(difference in likelihoods)
redo_likeoffset =  0
