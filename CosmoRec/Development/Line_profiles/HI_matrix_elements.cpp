//==========================================================================================
// Author Jens Chluba Aug/Sept 2010
// purpose: explicit expression for matrix elements of the first few ns & nd-states in HI
//==========================================================================================

#include <cmath>

#include "Definitions.h"
#include "HI_matrix_elements.h"

using namespace std;

//==========================================================================================
//==========================================================================================
namespace HI_matrix_elements 
{
    double Rnsnp(int n){ return -1.5*n*sqrt(n*n - 1.0); }
    double Rndnp(int n){ return -1.5*n*sqrt(n*n - 4.0); }
    
    //======================================================================================
    // bound-bound matrix elements
    //======================================================================================
    double R1snp(int n){ double dn=n; return 16.0 *pow((dn-1.0)/(n+1.0), n)*sqrt( pow(dn, 7)/pow(dn*n-1.0, 5) ); }
    double R2snp(int n){ double dn=n; return 256.0*sqrt( 2.0*pow(dn, 7)*(n*n-1.0) )*pow((dn-2.0)/(n+2.0), n)/pow(dn*n-4.0, 3); }
    //======================================================================================
    double R3snp(int n){ double dn=n; return 432.0*sqrt( 3.0*pow(dn, 7)*(n*n-1.0) )*(7.0*n*n-27.0)*pow((dn-3.0)/(n+3.0), n)/pow(dn*n-9.0, 4); }
    double R3dnp(int n){ double dn=n; return 864.0*sqrt( 1.2*pow(dn,11)*(n*n-1.0) )               *pow((dn-3.0)/(n+3.0), n)/pow(dn*n-9.0, 4); }
    //======================================================================================
    double R4snp(int n){ double dn=n; return 64.0/3.0*sqrt( 1.0*pow(4.0*n, 7)*(n*n-1.0) )*((23.0*n*n-288.0)*n*n+768.0)*pow((dn-4.0)/(n+4.0), n)/pow(dn*n-16.0, 5); }
    double R4dnp(int n){ double dn=n; return 8.0 /3.0*sqrt( 0.2*pow(4.0*n,11)*(n*n-1.0) )*(7.0*n*n-48.0)              *pow((dn-4.0)/(n+4.0), n)/pow(dn*n-16.0, 5); }
    //======================================================================================
    double R5snp(int n){ double dn=n; return 16.0*625.0/3.0*sqrt(      5.0*pow(dn, 7)*(n*n-1.0) )*(((91.0*n*n-2545.0)*n*n+20625.0)*n*n-46875.0)*pow((dn-5.0)/(n+5.0), n)/pow(dn*n-25.0, 6); }
    double R5dnp(int n){ double dn=n; return 32.0*625.0/3.0*sqrt( 10.0/7.0*pow(dn,11)*(n*n-1.0) )*((29.0*n*n-590.0)*n*n+2625.0)                *pow((dn-5.0)/(n+5.0), n)/pow(dn*n-25.0, 6); }
    //======================================================================================
    double R6snp(int n){ double dn=n; return (6912*sqrt(6.0)*pow(dn,3)*pow((-6.0 + dn)/(6.0 + dn), n)*sqrt(dn*(-1.0 + pow(dn,2)))*(-108.0 + 7.0*pow(dn,2))*
                                              (-233280.0 + 97200.0*pow(dn,2) - 10620.0*pow(dn,4) + 289.0*pow(dn,6)))/(5.*pow(-36.0 + pow(dn,2),7)); }
    double R6dnp(int n){ double dn=n; return (55296*sqrt(0.08571428571428572)*pow(dn,5)*pow((-6.0 + dn)/(6.0 + dn),n)*sqrt(dn*(-1.0 + pow(dn,2)))*
                                              (-326592.0 + 89424*pow(dn,2) - 7092*pow(dn,4) + 167*pow(dn,6)))/pow(-36.0 + pow(dn,2),7); }
    //======================================================================================
    double R7snp(int n){ double dn=n; return (38416*sqrt(7.0)*pow(dn,3)*pow((-7.0 + dn)/(7.0 + dn), n)*sqrt(dn*(-1.0 + pow(dn,2)))*
                                              (-12711386205.0 + 6485401125.0*pow(dn,2) - 1097665170.0*pow(dn,4) + 79704282.0*pow(dn,6) - 2547265.0*pow(dn,8) + 
                                               29233*pow(dn,10)))/(45.*pow(-49.0 + pow(dn,2),8)); }
    double R7dnp(int n){ double dn=n; return (153664*sqrt(0.4666666666666667)*pow(dn,5)*pow((-7.0 + dn)/(7.0 + dn),n)*sqrt(dn*(-1.0 + pow(dn,2)))*
                                              (155649627.0 - 47799108*pow(dn,2) + 4760154*pow(dn,4) - 186788*pow(dn,6) + 2483*pow(dn,8)))/
                                              (9.*pow(-49.0 + pow(dn,2),8)); }
    //======================================================================================
    double R8snp(int n){ double dn=n; return (131072*sqrt(2.0)*pow(dn,3)*pow((-8.0 + dn)/(8.0 + dn),n)*sqrt(dn*(-1.0 + pow(dn,2)))*
                                              (21646635171840.0 - 11499774935040.0*pow(dn,2) + 2101597962240.0*pow(dn,4) - 175037743104.0*pow(dn,6) + 
                                               7190401024.0*pow(dn,8) - 140890496.0*pow(dn,10) + 1044871.0*pow(dn,12)))/(315.*pow(-64.0 + pow(dn,2),9)); }
    double R8dnp(int n){ double dn=n; return (262144*sqrt(0.01904761904761905)*pow(dn,5)*pow((-8.0 + dn)/(8.0 + dn),n)*sqrt(dn*(-1.0 + pow(dn,2)))*
                                              (-1014686023680.0 + 335963750400.0*pow(dn,2) - 38338560000.0*pow(dn,4) + 1932468224.0*pow(dn,6) - 43842880.0*pow(dn,8) + 
                                               363461*pow(dn,10)))/(45.*pow(-64.0 + pow(dn,2),9)); }
        
    //======================================================================================
    // bound-free matrix elements
    //======================================================================================
    double C1s(double x){ return 16.0 *exp( -2.0*atan(x)/x )    *sqrt( x/pow(1.0 + x*x, 5)/( 1.0 - exp(-2.0*PI/x) )); }
    double C2s(double x){ return 256.0*exp( -2.0*atan(2.0*x)/x )*sqrt( 2.0*x*(1.0+x*x)/( 1.0 - exp(-2.0*PI/x) ) ) /pow(1.0+4.0*x*x, 3); }
    //======================================================================================
    double C3s(double x){ return 432.0*exp( -2.0*atan(3.0*x)/x )*(7.0+27.0*x*x)*sqrt( 3.0*x*(1.0+x*x)/( 1.0 - exp(-2.0*PI/x) ) ) /pow(1.0+9.0*x*x, 4); }
    double C3d(double x){ return 864.0*exp( -2.0*atan(3.0*x)/x )               *sqrt( 1.2*x*(1.0+x*x)/( 1.0 - exp(-2.0*PI/x) ) ) /pow(1.0+9.0*x*x, 4); }
    //======================================================================================
    double C4s(double x){ return 8192.0/3.0*exp( -2.0*atan(4.0*x)/x )*(23.0+96.0*x*x*(3.0+8.0*x*x) )*sqrt(    x*(1.0+x*x)/( 1.0 - exp(-2.0*PI/x) ) ) /pow(1.0+16.0*x*x, 5); }
    double C4d(double x){ return 8192.0/3.0*exp( -2.0*atan(4.0*x)/x )*(7.0+48.0*x*x)                *sqrt(0.8*x*(1.0+x*x)/( 1.0 - exp(-2.0*PI/x) ) ) /pow(1.0+16.0*x*x, 5); }
    //======================================================================================
    double C5s(double x){ return 1.0e+4/3.0*exp( -2.0*atan(5.0*x)/x )*(91.0+5.0*x*x*(509.0+x*x*(4125.0+9375.0*x*x)) )*sqrt(5.0*x*(1.0+x*x)/( 1.0 - exp(-2.0*PI/x) ) ) /pow(1.0+25.0*x*x, 6); }
    double C5d(double x){ return 2.0e+4/3.0*exp( -2.0*atan(5.0*x)/x )*(29.0+x*x*(590.0+2625.0*x*x) )            *sqrt(10.0/7.0*x*(1.0+x*x)/( 1.0 - exp(-2.0*PI/x) ) ) /pow(1.0+25.0*x*x, 6); }
    //======================================================================================
    double C6s(double x){ return exp( -2.0*atan(6.0*x)/x )/sqrt(1.0 - exp(-2.0*PI/x))*
                                  (6912*sqrt( 6*x*(1 + pow(x,2)) )*(7.0 + 108*pow(x,2))*(289.0 + 180*pow(x,2)*(59 + 540*pow(x,2) + 1296*pow(x,4))))/(5.*pow(1 + 36*pow(x,2),7)); }
    
    double C6d(double x){ return exp( -2.0*atan(6.0*x)/x )/sqrt(1.0 - exp(-2.0*PI/x))*
                                  (55296*sqrt( 0.08571428571428572*x*(1.0 + pow(x,2)) )*(167.0 + 36*pow(x,2)*(197 + 2484*pow(x,2) + 9072*pow(x,4))))/pow(1 + 36*pow(x,2),7); }
    //======================================================================================
    double C7s(double x){ return exp( -2.0*atan(7.0*x)/x )/sqrt(1.0 - exp(-2.0*PI/x))*
                                    (38416*sqrt(7.0*x*(1 + pow(x,2)))*
                                    (29233.0 + 49*pow(x,2)*(51985.0 + 21*pow(x,2)*(77458.0 + 1715*pow(x,2)*(622 + 3675*pow(x,2) + 7203*pow(x,4))))))/
                                    (45.*pow(1 + 49*pow(x,2),8)); }
    
    double C7d(double x){ return exp( -2.0*atan(7.0*x)/x )/sqrt(1.0 - exp(-2.0*PI/x))*
                                    (153664*sqrt(0.4666666666666667*x*(1 + pow(x,2)))*
                                    (2483.0 + 49*pow(x,2)*(3812 + 63*pow(x,2)*(1542 + 15484*pow(x,2) + 50421*pow(x,4)))))/
                                    (9.*pow(1 + 49*pow(x,2),8)); }
    //======================================================================================
    double C8s(double x){ return exp( -2.0*atan(8.0*x)/x )/sqrt(1.0 - exp(-2.0*PI/x))*
                                    (131072*sqrt(2*x*(1 + pow(x,2)))*
                                    (1044871 + 128*pow(x,2)*(1100707 + 32*pow(x,2)*(1755469 + 5376*pow(x,2)*(7949 + 80*pow(x,2)*(1193 + 384*pow(x,2)*(17 + 32*pow(x,2))))))))/
                                    (315.*pow(1 + 64*pow(x,2),9)); }
    
    double C8d(double x){ return exp( -2.0*atan(8.0*x)/x )/sqrt(1.0 - exp(-2.0*PI/x))*
                                    (262144*sqrt(0.01904761904761905*x*(1 + pow(x,2)))*
                                    (363461 + 64*pow(x,2)*(685045 + 128*pow(x,2)*(235897 + 2880*pow(x,2)*(1625 + 14240*pow(x,2) + 43008*pow(x,4))))))/
                                    (45.*pow(1 + 64*pow(x,2),9)); }
}





