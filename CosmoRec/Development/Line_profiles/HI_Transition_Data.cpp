//==========================================================================================
// Author Jens Chluba Aug/Sept 2010
// purpose: contains precomputed transitions rates for ns & nd-states of hydrogen
//==========================================================================================

#include <cmath>
#include <stdlib.h>

#include "HI_Transition_Data.h"

using namespace std;

//==========================================================================================
//==========================================================================================

namespace HI_Transition_Data 
{
    //======================================================================================
    // Gamma_n=A_tot/(4 pi) for the first ten p-states (vacuum)
    //======================================================================================
    const double Gamma_n[11]={0.0, 0.0, 
        4.9854513927e+07, 1.5095925950e+07, 6.4670517170e+06, 
        3.3451610977e+06, 1.9495424851e+06, 1.2339104038e+06, 
        8.2972074415e+05, 5.8440423401e+05, 4.2698152446e+05 };
    
    //======================================================================================
    // A_np1s for the first ten p-states (vacuum)
    //======================================================================================
    const double A_np1s[11]={0.0, 0.0, 
        6.2649029880e+08, 1.6725272015e+08, 6.8186650805e+07,
        3.4375325037e+07, 1.9728343296e+07, 1.2361897428e+07,
        8.2548514109e+06, 5.7848777330e+06, 4.2105417638e+06 };
    
    //======================================================================================
    // A_np2s for the first ten p-states (vacuum); n<2 : A2snp; n>2 : Anp3s*3
    //======================================================================================
    const double A_np2s[11]={0.0, 0.0, 
        0.0000000000e+00, 6.7344840302e+07, 2.9004180500e+07, 
        1.4844946392e+07, 8.5749685625e+06, 5.3915022318e+06, 
        3.6076127749e+06, 2.5315110827e+06, 1.8442485007e+06 };
    
    //======================================================================================
    // A_np3s for the first ten p-states (vacuum); n<3 : A3snp; n>3 : Anp3s*3
    //======================================================================================
    const double A_np3s[11]={0.0, 0.0, 
        6.3135787783e+06, 0.0000000000e+00, 9.1953650274e+06, 
        4.9131411671e+06, 2.8652653376e+06, 1.8076225771e+06, 
        1.2113587478e+06, 8.5069132564e+05, 6.2002115532e+05 };
    
    //======================================================================================
    // A_np3d for the first ten p-states (vacuum); n<3 : A3dnp; n>3 : Anp3d*3/5
    //======================================================================================
    const double A_np3d[11]={0.0, 0.0, 
        6.4651046690e+07, 0.0, 2.0852160638e+05, 
        8.9721350751e+04, 4.6944507291e+04, 2.7816707628e+04, 
        1.7916307603e+04, 1.2249955089e+04, 8.7610539269e+03 };
    
    //======================================================================================
    // A_np4s for the first ten p-states (vacuum); n<4 : A4snp; n>4 : Anp4s*3
    //======================================================================================
    const double A_np4s[11]={0.0, 0.0, 
        2.5781493778e+06, 1.8354245561e+06, 0.0000000000e+00, 
        2.2115578948e+06, 1.3368618861e+06, 8.4840824452e+05, 
        5.6923908098e+05, 3.9979164333e+05, 2.9132665228e+05 };
    
    //======================================================================================
    // A_np4d for the first ten p-states (vacuum); n<4 : A4dnp; n>4 : Anp4d*3/5
    //======================================================================================
    const double A_np4d[11]={0.0, 0.0, 
        2.0625195022e+07, 7.0376042153e+06, 0.0000000000e+00, 
        1.1307500755e+05, 5.6500877140e+04, 3.2344351252e+04, 
        2.0375220178e+04, 1.3726002400e+04, 9.7153904331e+03 };
    
    //======================================================================================
    // A_np5s for the first ten p-states (vacuum); n<5 : A5snp; n>5 : Anp5s*3
    //======================================================================================
    const double A_np5s[11]={0.0, 0.0, 
        1.2886238187e+06, 9.0469028674e+05, 6.4507290837e+05, 
        0.0000000000e+00, 7.2886853656e+05, 4.7726087679e+05, 
        3.2133776273e+05, 2.2561551265e+05, 1.6425211401e+05 };
    
    //======================================================================================
    // A_np5d for the first ten p-states (vacuum); n<5 : A5dnp; n>5 : Anp5d*3/5
    //======================================================================================
    const double A_np5d[11]={0.0, 0.0, 
        9.4253627883e+06, 3.3914670584e+06, 1.4857841466e+06, 
        0.0000000000e+00, 5.7559811179e+04, 3.1843684445e+04, 
        1.9472851247e+04, 1.2858693409e+04, 8.9773868087e+03 };
    
    //======================================================================================
    // A_np6s for the first ten p-states (vacuum); n<6 : A6snp; n>6 : Anp6s*3
    //======================================================================================
    const double A_np6s[11]={0.0, 0.0, 
        7.3499730535e+05, 5.0716833769e+05, 3.5823924016e+05, 
        2.6817261032e+05, 0.0000000000e+00, 2.9368501138e+05, 
        2.0337356295e+05, 1.4304327320e+05, 1.0399250055e+05 };
    
    //======================================================================================
    // A_np6d for the first ten p-states (vacuum); n<6 : A6dnp; n>6 : Anp6d*3/6
    //======================================================================================
    const double A_np6d[11]={0.0, 0.0, 
        5.1449811375e+06, 1.8777802916e+06, 8.6219049632e+05, 
        4.4948540312e+05, 0.0000000000e+00, 3.0626275343e+04, 
        1.8242081134e+04, 1.1732879744e+04, 8.0426754703e+03 };
    
    //======================================================================================
    // A_np7s for the first ten p-states (vacuum); n<7 : A7snp; n>7 : Anp7s*3
    //======================================================================================
    const double A_np7s[11]={0.0, 0.0, 
        4.5865209958e+05, 3.1281969250e+05, 2.1737827223e+05, 
        1.6172420656e+05, 1.2651106582e+05, 0.0000000000e+00, 
        1.3603689792e+05, 9.8180818119e+04, 7.1411984347e+04 };
    
    //======================================================================================
    // A_np7d for the first ten p-states (vacuum); n<7 : A7dnp; n>7 : Anp7d*3/7
    //======================================================================================
    const double A_np7d[11]={0.0, 0.0, 
        3.1310649998e+06, 1.1495680193e+06, 5.3378516091e+05, 
        2.9023906301e+05, 1.7041292467e+05, 0.0000000000e+00, 
        1.7237954328e+04, 1.0859424549e+04, 7.2684865215e+03 };
    
    //======================================================================================
    // A_np8s for the first ten p-states (vacuum); n<8 : A8snp; n>8 : Anp8s*3
    //======================================================================================
    const double A_np8s[11]={0.0, 0.0, 
        3.0540637248e+05, 2.0667962733e+05, 1.4195343129e+05, 
        1.0399373206e+05, 8.1042944719e+04, 6.5699773635e+04, 
        0.0000000000e+00, 6.9805802450e+04, 5.2007272300e+04 };
    
    //======================================================================================
    // A_np8d for the first ten p-states (vacuum); n<8 : A8dnp; n>8 : Anp8d*3/8
    //======================================================================================
    const double A_np8d[11]={0.0, 0.0, 
        2.0523308231e+06, 7.5584422702e+05, 3.5245055864e+05, 
        1.9333283502e+05, 1.1794485559e+05, 7.5414091100e+04, 
        0.0000000000e+00, 1.0222629314e+04, 6.7295901074e+03 };
    
    //======================================================================================
    // access the rates for np levels
    //======================================================================================
    double Get_Gamma_np(int n){ return Gamma_n[n]; }
    double Get_A_np1s(int n){ return A_np1s[n]; }
    
    //======================================================================================
    // access the rate for ns/d->np transition
    //======================================================================================
    //======================================================================================
    // A_npks for the first ten p-states (vacuum); n<k : Aksnp; n>k : Anpks*3;   k==n : 0
    //======================================================================================
    double Get_A_np2s(int n){ return A_np2s[n]; }
    double Get_A_np3s(int n){ return A_np3s[n]; }
    double Get_A_np4s(int n){ return A_np4s[n]; }
    double Get_A_np5s(int n){ return A_np5s[n]; }
    double Get_A_np6s(int n){ return A_np6s[n]; }
    double Get_A_np7s(int n){ return A_np7s[n]; }
    double Get_A_np8s(int n){ return A_np8s[n]; }
    //
    double Get_A_npks(int k, int n)
    { 
        if(k==1) return A_np1s[n]; 
        if(k==2) return A_np2s[n]; 
        if(k==3) return A_np3s[n]; 
        if(k==4) return A_np4s[n]; 
        if(k==5) return A_np5s[n]; 
        if(k==6) return A_np6s[n]; 
        if(k==7) return A_np7s[n]; 
        if(k==8) return A_np8s[n]; 
        return 0.0;
    }
    
    //======================================================================================
    // A_npkd for the first ten p-states (vacuum); n<3 : A3dnp; n>3 : Anp3d*3/5; k==n : 0
    //======================================================================================
    double Get_A_np3d(int n){ return A_np3d[n]; }
    double Get_A_np4d(int n){ return A_np4d[n]; }
    double Get_A_np5d(int n){ return A_np5d[n]; }
    double Get_A_np6d(int n){ return A_np6d[n]; }
    double Get_A_np7d(int n){ return A_np7d[n]; }
    double Get_A_np8d(int n){ return A_np8d[n]; }
    //
    double Get_A_npkd(int k, int n)
    { 
        if(k==3) return A_np3d[n]; 
        if(k==4) return A_np4d[n]; 
        if(k==5) return A_np5d[n]; 
        if(k==6) return A_np6d[n]; 
        if(k==7) return A_np7d[n]; 
        if(k==8) return A_np8d[n]; 
        return 0.0;
    }
}   



